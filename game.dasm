
		processor 6502
        	include "vcs.h"
       	include "macro.h"
       	include "xmacro.h"

;=======================================
; 
;=======================================

        seg.u Variables
	org $80

Temp		.byte
XPos		.byte
YPos		.byte
fTimer		.byte
onesDig		.byte
tensDig		.byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
        lda #80
        sta XPos
        sta YPos
        lda #0
        sta fTimer
        sta onesDig
        sta tensDig

NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; BG color
        ldx #$80	
    	stx COLUBK	
; PF color
	lda #$1C
        sta COLUPF
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 37 lines of underscan
	TIMER_SETUP 32
        
; Borrowed from example 13 Joysticks
; move X and Y coordinates w/ joystick
	jsr MoveJoystick
; the next two scanlines
; position the player horizontally
	sta WSYNC
	lda XPos	; get X coordinate
        ldx #0		; player 0
        sta WSYNC
        jsr SetHorizPos	; set coarse offset
        sta WSYNC	; sync w/ scanline
        sta HMOVE	; apply fine offsets
        sta WSYNC
; it's ok if we took an extra scanline because
; the PIA timer will always count 37 lines
; wait for end of underscan
        
        TIMER_WAIT

DrawField
; Reflection
	ldx #%00000001
        stx CTRLPF
; Clear PF registers
	ldx #0
        stx PF0
        stx PF1
        stx PF2
; Wait for next scanline
	REPEAT 3
        sta WSYNC
	REPEND
        
        lda tensDig
        ASL
        ASL
        CLC
	ADC tensDig
        tax
        
        lda onesDig
        ASL
        ASL
        CLC
	ADC onesDig
        tay
        
        sta WSYNC
        
; Timer draw
	REPEAT 5
        
        REPEAT 4
        lda SecondDigit,Y
        ora FirstDigit,X
        sta PF1
        REPEAT 10
        nop
        REPEND
        lda #0
        sta PF1
        sta WSYNC
	REPEND
        
        inx
        iny
        
        REPEND
        
        lda #0
        sta PF1
        
        sta WSYNC
        sta WSYNC
        sta WSYNC
        sta WSYNC
        
; Top line
	ldx #%11100000
        stx PF0
        ldx #%11111111
        stx PF1
        stx PF2
        REPEAT 8
        sta WSYNC
        REPEND
        
        ldy #154 ;Start line counter for player

; Middle
        REPEAT 20
        jsr DrawWall
        jsr CheckPlayer
        REPEND
        REPEAT 10
        jsr DrawDot
        jsr CheckPlayer
        REPEND
        REPEAT 95
        jsr DrawWall
        jsr CheckPlayer
        REPEND
        REPEAT 10
        jsr DrawDot
        jsr CheckPlayer
        REPEND
        REPEAT 20
        jsr DrawWall
        jsr CheckPlayer
        REPEND
        
; Bottom
	ldx #%11100000
        stx PF0
        ldx #%11111111
        stx PF1
        stx PF2
        REPEAT 8
        sta WSYNC
        REPEND
; End
	ldx #0
        stx PF0
        stx PF1
        stx PF2
        REPEAT 10
        sta WSYNC
        REPEND

OverScan
	jsr TimerLogic
        sta WSYNC ; HELP
; 29 lines of overscan
	TIMER_SETUP 29  
        TIMER_WAIT
; total = 262 lines, go to next frame
        jmp NextFrame
        
TimerLogic
	ldx fTimer
        inx
        stx fTimer
        cpx #60
        bcc SkipReset
        ldx #0
        stx fTimer
        ldx onesDig
        inx
        stx onesDig
        cpx #10
        bcc SkipReset
        ldx #0
        stx onesDig
        ldx tensDig
        inx
        stx tensDig
        cpx #10
        bcc SkipReset
        ldx #0
        stx tensDig

SkipReset
	rts

DrawWall
	ldx #%00100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        rts

DrawDot
	ldx #%10100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        rts

; drawplayer subroutine
CheckPlayer
	tya
        sec
        sbc YPos
        cmp #9
        bcc InSprite
        lda #0
        sta WSYNC
        sta GRP0
        nop
        nop
        nop
        dey
        rts

InSprite
	tax		; local coord -> X
        lda Frame0,x	; lookup color
        sta WSYNC	; sync w/ scanline
        sta GRP0	; store bitmap
        lda ColorFrame0,x ; lookup color
        sta COLUP0	; store color
        dey		; decrement X
        rts
        
; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
	sta WSYNC	; start a new line
	sec		; set carry flag
        
DivideLoop
	sbc #15		; subtract 15
	bcs DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
        sta WSYNC
	sta HMP0,x	; set fine offset
	rts		; return to caller

; Read joystick movement and apply to object 0
MoveJoystick
; Move vertically
; (up and down are actually reversed since ypos starts at bottom)
	ldx YPos
	lda #%00100000	;Up?
	bit SWCHA
	bne SkipMoveUp
        cpx #2
        bcc SkipMoveUp
        dex
        
SkipMoveUp
	lda #%00010000	;Down?
	bit SWCHA 
	bne SkipMoveDown
        cpx #147 ; HELP
        bcs SkipMoveDown
        inx
        
SkipMoveDown
	stx YPos
; Move horizontally
        ldx XPos
	lda #%01000000	;Left?
	bit SWCHA
	bne SkipMoveLeft
        cpx #17
        bcc SkipMoveLeft
        dex
        
SkipMoveLeft
	lda #%10000000	;Right?
	bit SWCHA 
	bne SkipMoveRight
        cpx #154
        bcs SkipMoveRight
        inx
        
SkipMoveRight
	stx XPos
	rts

Sprite

;---Graphics Data from PlayerPal 2600---

Frame0
    	.byte #%00111100;$F6
    	.byte #%01111110;$F6
    	.byte #%01111110;$C4
    	.byte #%01111110;$F0
    	.byte #%01111110;$42
    	.byte #%01111110;$1A
    	.byte #%01111110;$F6
    	.byte #%00111100;$F6
        .byte #%00000000
;---End Graphics Data---


;---Color Data from PlayerPal 2600---

ColorFrame0
    	.byte #$F6;
    	.byte #$F6;
    	.byte #$C4;
    	.byte #$F0;
    	.byte #$42;
    	.byte #$1A;
    	.byte #$F6;
    	.byte #$F6;
        .byte #$00
;---End Color Data---

;---Graphics Data from PlayerPal 2600---
FirstDigit
Number0X
        .byte #%01000000;--
        .byte #%10100000;--
        .byte #%10100000;--
        .byte #%10100000;--
        .byte #%01000000;--
Number1X
        .byte #%01000000;--
        .byte #%11000000;--
        .byte #%01000000;--
        .byte #%01000000;--
        .byte #%11100000;--
Number2X
        .byte #%01000000;--
        .byte #%10100000;--
        .byte #%00100000;--
        .byte #%01000000;--
        .byte #%11100000;--
Number3X
        .byte #%11000000;--
        .byte #%00100000;--
        .byte #%01000000;--
        .byte #%00100000;--
        .byte #%11000000;--
Number4X
        .byte #%10100000;--
        .byte #%10100000;--
        .byte #%11100000;--
        .byte #%00100000;--
        .byte #%00100000;--
Number5X
        .byte #%11100000;--
        .byte #%10000000;--
        .byte #%11100000;--
        .byte #%00100000;--
        .byte #%11100000;--
Number6X
        .byte #%11100000;--
        .byte #%10000000;--
        .byte #%11100000;--
        .byte #%10100000;--
        .byte #%11100000;--
Number7X
        .byte #%11100000;--
        .byte #%00100000;--
        .byte #%01000000;--
        .byte #%10000000;--
        .byte #%10000000;--
Number8X
        .byte #%11100000;--
        .byte #%10100000;--
        .byte #%01000000;--
        .byte #%10100000;--
        .byte #%11100000;--
Number9X
        .byte #%11100000;--
        .byte #%10100000;--
        .byte #%11100000;--
        .byte #%00100000;--
        .byte #%11100000;--
SecondDigit
NumberX0
        .byte #%00000100;--
        .byte #%00001010;--
        .byte #%00001010;--
        .byte #%00001010;--
        .byte #%00000100;--
NumberX1
        .byte #%00000100;--
        .byte #%00001100;--
        .byte #%00000100;--
        .byte #%00000100;--
        .byte #%00001110;--
NumberX2
        .byte #%00000100;--
        .byte #%00001010;--
        .byte #%00000010;--
        .byte #%00000100;--
        .byte #%00001110;--
NumberX3
        .byte #%00001100;--
        .byte #%00000010;--
        .byte #%00000100;--
        .byte #%00000010;--
        .byte #%00001100;--
NumberX4
        .byte #%00001010;--
        .byte #%00001010;--
        .byte #%00001110;--
        .byte #%00000010;--
        .byte #%00000010;--
NumberX5
        .byte #%00001110;--
        .byte #%00001000;--
        .byte #%00001110;--
        .byte #%00000010;--
        .byte #%00001110;--
NumberX6
        .byte #%00001110;--
        .byte #%00001000;--
        .byte #%00001110;--
        .byte #%00001010;--
        .byte #%00001110;--
NumberX7
        .byte #%00001110;--
        .byte #%00000010;--
        .byte #%00000100;--
        .byte #%00001000;--
        .byte #%00001000;--
NumberX8
        .byte #%00001110;--
        .byte #%00001010;--
        .byte #%00000100;--
        .byte #%00001010;--
        .byte #%00001110;--
NumberX9
        .byte #%00001110;--
        .byte #%00001010;--
        .byte #%00001110;--
        .byte #%00000010;--
        .byte #%00001110;--
;---End Graphics Data---


;---Color Data from PlayerPal 2600---

ColorNumber
        .byte #$0E;
        .byte #$0E;
        .byte #$0E;
        .byte #$0E;
        .byte #$0E;

;---End Color Data---



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector


















