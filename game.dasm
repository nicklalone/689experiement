
	processor 6502
        include "vcs.h"
       	include "macro.h"
       	include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u Variables
	org $80

Temp		.byte
XPos		.byte
YPos		.byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
        lda #20
        sta XPos
        lda #1
        sta YPos

NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; BG color
        ldx #$80	
    	stx COLUBK	
; PF color
	lda #$1C
        sta COLUPF
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 37 lines of underscan
	TIMER_SETUP 37
        
; Borrowed from example 13 Joysticks
; move X and Y coordinates w/ joystick
	jsr MoveJoystick
; the next two scanlines
; position the player horizontally
	lda XPos	; get X coordinate
        ldx #0		; player 0
        jsr SetHorizPos	; set coarse offset
        sta WSYNC	; sync w/ scanline
        sta HMOVE	; apply fine offsets
; it's ok if we took an extra scanline because
; the PIA timer will always count 37 lines
; wait for end of underscan
        
        
        
        TIMER_WAIT

; I feel like I messed up the drawing but it's not freaking out so maybe it's okay?
DrawField
; Reflection
	ldx #%00000001
        stx CTRLPF
; Clear PF registers
	ldx #0
        stx PF0
        stx PF1
        stx PF2
; Wait for next scanline
	REPEAT 10
        sta WSYNC
	REPEND
; Top line
	ldx #%11100000
        stx PF0
        ldx #%11111111
        stx PF1
        stx PF2
        REPEAT 8
        sta WSYNC
        REPEND
        ldy #174 ;Start line counter for player
; Middle
	ldx #%00100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        REPEAT 20
        jsr CheckPlayer
        ;sta WSYNC
        REPEND
        ldx #%10100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        REPEAT 10
        jsr CheckPlayer
        REPEND
        ldx #%00100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        REPEAT 115
        jsr CheckPlayer
        REPEND
        ldx #%10100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        REPEAT 10
        jsr CheckPlayer
        REPEND
        ldx #%00100000
        stx PF0
        ldx #0
        stx PF1
        stx PF2
        REPEAT 20
        jsr CheckPlayer
        REPEND
; Bottom
	ldx #%11100000
        stx PF0
        ldx #%11111111
        stx PF1
        stx PF2
        REPEAT 8
        sta WSYNC
        REPEND
; End
	ldx #0
        stx PF0
        stx PF1
        stx PF2
        REPEAT 10
        sta WSYNC
        REPEND

OverScan
; 29 lines of overscan
	TIMER_SETUP 29
        TIMER_WAIT
; total = 262 lines, go to next frame
        jmp NextFrame


; drawplayer subroutine
CheckPlayer
	tya
        sec
        sbc YPos
        cmp #9
        bcc InSprite
        lda #0
        sta GRP0
        sta WSYNC
        dey
        rts
InSprite
	tax		; local coord -> X
        lda Frame0,x	; lookup color
        sta WSYNC	; sync w/ scanline
        sta GRP0	; store bitmap
        lda ColorFrame0,x ; lookup color
        sta COLUP0	; store color
        dey		; decrement X
        rts
        
; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
	sta WSYNC	; start a new line
	sec		; set carry flag
DivideLoop
	sbc #15		; subtract 15
	bcs DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	sta HMP0,x	; set fine offset
	rts		; return to caller

; Read joystick movement and apply to object 0
MoveJoystick
; Move vertically
; (up and down are actually reversed since ypos starts at bottom)
	ldx YPos
	lda #%00100000	;Up?
	bit SWCHA
	bne SkipMoveUp
        cpx #2
        bcc SkipMoveUp
        dex
SkipMoveUp
	lda #%00010000	;Down?
	bit SWCHA 
	bne SkipMoveDown
        cpx #167
        bcs SkipMoveDown
        inx
SkipMoveDown
	stx YPos
; Move horizontally
        ldx XPos
	lda #%01000000	;Left?
	bit SWCHA
	bne SkipMoveLeft
        cpx #17
        bcc SkipMoveLeft
        dex
SkipMoveLeft
	lda #%10000000	;Right?
	bit SWCHA 
	bne SkipMoveRight
        cpx #154
        bcs SkipMoveRight
        inx
SkipMoveRight
	stx XPos
	rts

Sprite

;---Graphics Data from PlayerPal 2600---

Frame0
    	.byte #%00111100;$F6
    	.byte #%01111110;$F6
    	.byte #%01111110;$C4
    	.byte #%01111110;$F0
    	.byte #%01111110;$42
    	.byte #%01111110;$1A
    	.byte #%01111110;$F6
    	.byte #%00111100;$F6
        .byte #%00000000
;---End Graphics Data---


;---Color Data from PlayerPal 2600---

ColorFrame0
    	.byte #$F6;
    	.byte #$F6;
    	.byte #$C4;
    	.byte #$F0;
    	.byte #$42;
    	.byte #$1A;
    	.byte #$F6;
    	.byte #$F6;
        .byte #$00
;---End Color Data---



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector








